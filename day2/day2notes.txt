Weighted Graphs
  - A weighted graph is a graph whose edges have weights.
  - The weight of an edge is typically the cost/limitation of that edge
  - Repesenting weighted graphs:
    - Adjacency list: add a cost field to the element: {node, cost}
    - Adjacency matrix: add a replace the "connected" flag (0/1) with the cost field
  - Length of a path = the sum of the weights of the edges in the path
  - Shortest path = the path, between two nodes, that has the shortest length out of all the paths between the two nodes
Dijkstra's Algorithm
  - For a given source node in the graph, the Dijkstra algorithm finds the shortest path between that node and all the rest of the nodes (SSSP).
  - Limitation: All edges MUST have nonnegative (>= 0) weight.
  - Worst case performance: O((V+E)log(V))
Dijkstra pseudocode:
  function Dijkstra(Graph, source):
    create vertex set Q
    for each vertex v in Graph:  // Initialization
      dist[v] := INFINITY        // Unknown distance from source to v
      prev[v] := undefined       // Previous node in optimal path from source
      add v to Q                 // All nodes intiially in Q (unvisited nodes)
    dist[source] := 0            // Distance from source to source (0 by default)
    while Q is not empty:
      u := vertex in Q with min dist[u]  // Node with least distance will be selected first
      remove u from Q
      for each neighbor v of u:  // Where v is still in Q
        alt := dist[u] + length(u, v)
        if alt < dist[v]:        // Shorter path to v has been found!
          dist[v] := alt
          prev[v] := u
    return dist[], prev[]
Bellman Ford's algorithm
  - Dijkstra's Algorithm does not work when some edge gas negative weight.
  - The Bellman-Ford algorithm is an algorithm that computes shortest paths from a single source vertex to all of the other vertices (SSSP) in a weighted digraph. It is slower than Dijkstra's algorithm for the same problem, but more versatile, as it is capable of handling graphs in which some of the edge weights are negative numbers.
  - negative edges weights are foudn in various applications of graphs, hence the usefulness of this algorithm. If a graph contains a "negative cycle" (i.e. a cycle whose edges sum to a negative value) that is reachable from the source, then there is no cheapest path: any path that has a point on the negative cycle can be made cheaper by one more walk around the negative cycle. In such a case, the Bellman-Ford algorithm can detect and report the negative cycle (can detect it).
  - How Bellman Ford's algorithm works: It overestimates the length of the path from the starting vertex to all other vertices. The it iteratively relaxes those estimates by finding new paths that are shorter than these previously overestimated paths.
  - Worst case performance: O(|V||E|)
Bellman-Ford pseudocode:
  WIP
